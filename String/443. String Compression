class Solution {
    public int compress(char[] chars) {
        int curr = 0;
        char prev = 0;
        int total = 0;
        int index = 0;
        for(int i = 0; i < chars.length; i++){
            
            if(prev == 0){
                prev = chars[i];
                curr = 1;
            }
            else{
                if(chars[i] == prev){
                    curr++;
                }
                else{//not equals
                    int bits = 1;
                    chars[index++] = prev;
                    Stack<Character> stack = new Stack<>();
                    if(curr > 1){
                        while(curr != 0){
                            stack.push((char)('0' + curr % 10));
                            bits++;
                            curr /= 10;
                        }
                    }
                    while(!stack.isEmpty()){
                        chars[index++] = stack.pop();
                    }
                    total += bits;
                    prev = chars[i];
                    curr = 1;
                }
            }
        }
        if(curr > 1){
            int bits = 1;
            Stack<Character> stack = new Stack<>();
            chars[index++] = prev;
            while(curr != 0){
                stack.push((char)('0' + curr % 10));
                bits++;
                curr /= 10;
            }
            while(!stack.isEmpty()){
                chars[index++] = stack.pop();
            }
            total += bits;
        }
        else if(curr == 1){
            chars[index++] = prev;
            total++;
        }
        return total;
    }
}
