//regular
class Solution {
    public boolean isOneEditDistance(String s, String t) {
        int len1 = s.length(), len2 = t.length();
        int count = 0;
        if(Math.abs(len1 - len2) > 1) return false;
        if(len1 == len2){
            for(int i = 0; i < len1; i++){
                if(s.charAt(i) != t.charAt(i)){
                    count++; 
                }
            }
            return count == 1;
        }
        else{
            if(len1 == 0) return len2 == 1;
            if(len2 == 0) return len1 == 1;
            String long1, short1;
            if(len1 > len2){
                long1 = s;
                short1= t;
            }
            else{
                long1 = t;
                short1 = s;
            }
            int j = 0;
            for(int i = 0; i < Math.min(len1, len2); i++){
                if(j >= i + 2) return false;
            
                if(short1.charAt(i) != long1.charAt(j)){
                    i--;
                    count++;
                }
                j++;
            }
            return count <= 1;
        }
    }
}

//DP(edit distance) slow
class Solution {
    public boolean isOneEditDistance(String s, String t) {
        String word1 = s, word2 = t;
        int len1 = word1.length(), len2 = word2.length();
        int[][] dp = new int[len1 + 1][len2 + 1];
        for(int i = 1; i <= len1; i++){
            dp[i][0] = i;
        }
        for(int i = 1; i <= len2; i++){
            dp[0][i] = i;
        }
        for(int i = 1; i <= len1; i++){
            for(int j = 1; j <= len2; j++){
                if(word1.charAt(i - 1) == word2.charAt(j - 1)){
                    dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1));
                }
                else{
                    dp[i][j] = Math.min(dp[i - 1][j - 1] + 1, Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1));
                }
            }
        }
        //System.out.println(dp[len1][len2]);
        return dp[len1][len2] == 1;
    }
}
