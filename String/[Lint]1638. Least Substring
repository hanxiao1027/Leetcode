Given a string containing n lowercase letters, the string needs to be divided into several continuous substrings, the letter in the substring should be same, and the number of letters in the substring does not exceed k, and output the minimal substring number meeting the requirement.



public class Solution {
    /**
     * @param s: the string s
     * @param k: the maximum length of substring
     * @return: return the least number of substring
     */
    public int getAns(String s, int k) {
        // Write your code here
        int result = 0;
        char[] c = s.toCharArray();
        for(int i = 0; i < s.length();){
            int same = 1;
            while(i + 1 < s.length() && c[i] == c[i + 1]){
                same++;
                i++;
            }
            result += same % k == 0? 0 : 1;
            result += same / k;
            i++;
        }
        return result;
    }
}
