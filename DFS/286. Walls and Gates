class Solution {
    int rowmax, columnmax;
    public void wallsAndGates(int[][] rooms) {
        
        rowmax = rooms.length;
        if(rowmax == 0) return;
        columnmax = rooms[0].length;
        
        
        
        for(int i = 0; i < rowmax; i++){
            for(int j = 0; j < columnmax; j++){
                if(rooms[i][j] == 0){
                    helper(rooms, i, j, 0);
                }
            }
        }
        
    }
    private void helper(int[][] rooms, int i, int j, int distance){
        if(i < 0 || j < 0 || i >= rowmax || j >= columnmax){
            return;
        }
        if(rooms[i][j] == -1) return;
        if(distance > rooms[i][j]) {
            return;}
        if(distance < rooms[i][j])rooms[i][j] = distance;
        int[] row = {-1, 0, 1, 0};
        int[] column = {0, 1, 0, -1};
        for(int t = 0; t < 4; t ++){
            int newi = i + row[t];
            int newj = j + column[t];
            helper(rooms, newi, newj, distance + 1);
        }
    }
    
}
