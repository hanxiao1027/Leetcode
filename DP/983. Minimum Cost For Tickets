class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        int[] dp = new int[days.length + 1];
        dp[0] = costs[0];
        dp[days.length] = 0; //一张票从开始管到现在 代表0
        for(int i = 1; i < days.length; i++){
            
            dp[i] = Math.min(dp[i - 1] + costs[0], dp[prev7days(days, i)] + costs[1]);
           
            dp[i] = Math.min(dp[i], dp[prev30days(days, i)] + costs[2]);
           
        }
        return dp[days.length - 1];
    }
    private int prev7days(int[] days, int index){
        for(int i = index; i >= 0; i--){
            if(days[i] < days[index] - 6){
                return i;
            }
        }
        return days.length;
    }
    private int prev30days(int[] days, int index){
        for(int i = index; i >= 0; i--){
            if(days[i] < days[index] - 29){
                return i;
            }
        }
        return days.length;
    }
        
}
