class Solution {
    public String longestPalindrome(String s) {
        if(s == null || s.length() == 0) return "";
        int len = s.length();
        char[] S = s.toCharArray();
        int max;
        int res1 = 0, res2 = 0;
        int[][] dp = new int[len][len];
        for(int i = 0; i < len; i++){
            dp[i][i] = 1;
        }
        max = 1;
        for(int i = 0; i < len - 1; i++){
            dp[i][i + 1] = (S[i] == S[i + 1])? 2: 0;
            if(dp[i][i + 1] > max){
                max = 2;
                res1 = i;
                res2 = i + 1;
            }
        }
        for(int k = 2; k < len; k++){
            for(int i = 0; i + k < len; i++){
                int j = i + k;
                if(dp[i + 1][j - 1] == 0) dp[i][j] = 0;
                else{
                    if(S[i] == S[j]){
                        dp[i][j] = dp[i + 1][j - 1] + 2;
                    }
                    
                }
                if(dp[i][j] > max){
                    max = dp[i][j];
                    res1 = i;
                    res2 = j;
                }
                //System.out.println(i + " " + j + " " + dp[i][j]);
            }
        }
        
        return s.substring(res1, res2 + 1);
    }
}
