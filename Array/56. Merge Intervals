/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        int[] starts = new int[intervals.size()];
        int[] ends = new int[intervals.size()];
        for(int i = 0; i < intervals.size(); i++){
            starts[i] = intervals.get(i).start;
            ends[i] = intervals.get(i).end;
        }
        Arrays.sort(starts);
        Arrays.sort(ends);
        List<Interval> result = new ArrayList<>();
        //leftstart是区间start的index,rightend是区间end的index, left是最终区间左边界, right是最终又边界
        int leftstart = 0;
        while(leftstart < starts.length){
            int left = starts[leftstart];
            int rightend = leftstart;
            while(leftstart + 1 < starts.length && starts[leftstart + 1] <= ends[rightend]){
                leftstart++;
                rightend++;
            }
            int right = ends[rightend];
            //System.out.println(left + " " + right);
            result.add(new Interval(left, right));
            leftstart++;
        }
        return result;

    }
}
