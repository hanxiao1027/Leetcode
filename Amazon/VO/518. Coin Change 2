    public int change(int amount, int[] coins) {
        int[][] dp = new int[coins.length+1][amount+1];
        dp[0][0] = 1;
        
        for (int i = 1; i <= coins.length; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= amount; j++) {
                dp[i][j] = dp[i-1][j] + (j >= coins[i-1] ? dp[i][j-coins[i-1]] : 0);
            }
        }
        return dp[coins.length][amount];
    }

    public int change(int amount, int[] coins) {
        int[] dp = new int[amount + 1];
        dp[0] = 1;
        for (int coin : coins) {
            for (int i = coin; i <= amount; i++) {
                dp[i] += dp[i-coin];
            }
        }
        return dp[amount];
    }
///////my solution
class Solution {
    public int change(int amount, int[] coins) {
        if(amount == 0) return 1;
        
        int[][] dp = new int[amount + 1][coins.length + 1];
        
       
        for(int i = 1; i <= amount; i++){
            //System.out.println("....." + i);
            for(int j = 1; j <= coins.length; j++){
                if(i - coins[j - 1] == 0) dp[i][j] = 1;
                else if(i - coins[j - 1] < 0) dp[i][j] = 0;
                else{
                    for(int k = 1; k <= j; k++){
                        dp[i][j] += dp[i - coins[j - 1]][k];
                    }
                }
               // System.out.println(dp[i][j]);
            }
        }
        int ans = 0;
        for(int j = 1; j <= coins.length; j++){
            ans += dp[amount][j];
        }
        return ans;
    }
}
