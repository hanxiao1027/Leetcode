/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    class Node{
        TreeNode node;
        int pos;
        public Node(TreeNode node, int pos){
            this.node = node;
            this.pos = pos;
        }
    }
    int min, max;
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        min = 0;
        max = 0;
        List<List<Integer>> result = new ArrayList<>();
        if(root == null) return result;
        Map<Integer, List<Integer>> map = new HashMap<>();
        Queue<Node> queue = new LinkedList<>();
        queue.offer(new Node(root, 0));
        while(!queue.isEmpty()){
            int size = queue.size();
            Map<Integer, Integer> visited = new HashMap<>();
            for(int i = 0; i < size; i++){
                Node curr = queue.poll();
                TreeNode node = curr.node;
                int pos = curr.pos;
                if(pos < min){
                    min = pos;
                }
                if(pos > max){
                    max = pos;
                }
                
                List<Integer> list = map.getOrDefault(pos, new ArrayList<>());
                list.add(node.val);
                int amount = 1;
                if(visited.containsKey(pos)){
                    amount = visited.get(pos) + 1;
                    Collections.sort(list.subList(list.size() - amount, list.size()));
                    
                }
                visited.put(pos, amount);
                
                map.put(pos, list);
                if(node.left != null){
                    queue.offer(new Node(node.left, pos - 1));
                }
                if(node.right != null){
                    queue.offer(new Node(node.right, pos + 1));
                }
            }
            
        }
        for(int i = min; i <= max; i++){
            result.add(new ArrayList<>(map.get(i)));
        }
        return result;
        
    }
}
