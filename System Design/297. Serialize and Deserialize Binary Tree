/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    String code;

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null){
            return "[]";
        }
        Queue<TreeNode> queue = new LinkedList<>();
        
        code = "[";
        queue.offer(root);
        while(!queue.isEmpty()){
            TreeNode node = queue.poll();
            if(node == null){
                code += "null,";
                continue;
            }
            code += (node.val + ",");
            queue.offer(node.left);
            queue.offer(node.right);
            
        }
        code = code.substring(0, code.length() - 1);
        code += "]";
        return code;
    }
   

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.length() == 2) return null;
        String str = data.substring(1, data.length() - 1);
        String[] nodes = str.split(",");
        if(nodes.length == 0) return null;
        TreeNode root = new TreeNode(Integer.parseInt(nodes[0]));
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int i = 1;
        while(!queue.isEmpty() && i < nodes.length){
            TreeNode node = queue.poll();
            if(node == null) continue;
            node.left = nodes[i].equals("null")? null : new TreeNode(Integer.parseInt(nodes[i]));
            i++;
            node.right = nodes[i].equals("null")? null : new TreeNode(Integer.parseInt(nodes[i]));
            i++;
            queue.offer(node.left);
            queue.offer(node.right);
        }
        return root;
        
        
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
