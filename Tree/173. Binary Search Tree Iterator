/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class BSTIterator {
    List<Integer> tree;
    int index;
    int len;

    public BSTIterator(TreeNode root) {
        tree = new ArrayList<>();
        dfs(root, tree);
        index = 0;
        len = tree.size();
    }
    
    /** @return the next smallest number */
    public int next() {
        if(index >= len) return -1;
        return tree.get(index++);
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return(index < len);
    }
    private void dfs(TreeNode node, List<Integer> list){
        if(node == null) return;
        dfs(node.left, list);
        list.add(node.val);
        dfs(node.right, list);
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */
