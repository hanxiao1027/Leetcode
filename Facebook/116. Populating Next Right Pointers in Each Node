/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val,Node _left,Node _right,Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    public Node connect(Node root) {
        Queue<Node> queue = new LinkedList<>();
        if(root == null) return root;
        queue.offer(root);
        
        while(!queue.isEmpty()){
            Node prev = null;
            int size = queue.size();
            for(int i = 0; i < size; i++){
                Node curr = queue.poll();
                if(curr.left != null)queue.offer(curr.left);
                if(curr.right != null)queue.offer(curr.right);
                if(prev == null){
                    prev = curr;
                    continue;
                }
                prev.next = curr;
                prev = curr;
            }
        }
        return root;
    }
}
