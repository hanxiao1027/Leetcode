//buggy one
    public void reorder(Node node) {
        if(node == null) {
            return;
        }
        if((node.left == null || node.left != null && node.left.getVal() < node.getVal())
                && (node.right == null || node.right != null && node.right.getVal() < node.getVal())
                ) {
            return;
        }
         
        Node max = node.left;
        if(node.left == null) {
            max = node.right;
            // coding bug here(first)
        }else if(node.left.val < node.right.val) {
            max = node.right;
        }
         
        // coding bug here(second)
        max.setVal(node.getVal());
        node.setVal(max.getVal());
         
        // algorithm bug here(3rd)
        reorder(node.right);
        reorder(node.left);
    }

//correct one
    public void reorder2(Node node) {
        if(node == null) {
            return;
        }
        if((node.left == null || node.left != null && node.left.getVal() < node.getVal())
                && (node.right == null || node.right != null && node.right.getVal() < node.getVal())
                ) {
            return;
        }
         
        reorder2(node.right);
        reorder2(node.left);
         
        Node max = node.left;
        if(node.left == null) {
            max = node.right;
        }else if(node.right != null && node.left.val < node.right.val) {
            max = node.right;
        }
         
        int temp = max.getVal();
        max.setVal(node.getVal());
        node.setVal(temp);
         
        reorder2(node.right);
        reorder2(node.left);
    }
