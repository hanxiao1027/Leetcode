class Solution {
    int mod;
    public int[][] updateMatrix(int[][] matrix) {
        mod = 0;
        int amount = matrix.length * matrix[0].length;
        if(matrix == null || matrix.length == 0) return matrix;
        int[][] result = new int[matrix.length][matrix[0].length];
        for(int i = 0; i < matrix.length; i ++){
            for(int j = 0; j < matrix[0].length; j++){
                if(matrix[i][j] == 0) {
                    result[i][j] = 0;
                    mod++;
                }
                else{
                    result[i][j] = -1;
                }
            }
        }
        for(int k = 0; ; k++){//bfs numbers
            if(mod >= amount) return result;
            //System.out.println(k);
            for(int i = 0; i < matrix.length; i ++){
                for(int j = 0; j < matrix[0].length; j++){
                    if(result[i][j] == k){
                        bfs(result, i + 1, j, k + 1);
                        bfs(result, i, j + 1, k + 1);
                        bfs(result, i - 1, j, k + 1);
                        bfs(result, i, j - 1, k + 1);
                    }
                }
            }
        }
        
    }
    private void bfs(int[][] res, int i, int j, int val){
        if(i < 0 || j < 0 || i >= res.length || j >= res[0].length || res[i][j] != -1){
            return;
        }
        res[i][j] = val;
        mod++;
    }
}
